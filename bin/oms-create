#!/usr/bin/env node
const path = require('path')
const exists = require('fs').existsSync
const userHome = require('user-home')
const inquirer = require('inquirer')
const chalk = require('chalk')
const ora = require('ora')
const rm = require('rimraf').sync
const download = require('download-git-repo')
const checkVersion = require('../lib/check-version.js')
const fetchTemplateList = require('../lib/fetch-template-list')
const generate = require('../lib/generate')

// 检测版本并执行create函数
checkVersion(()=>{
  create()
})

function create() {
  // 本地存放模板的文件夹
  const tmpRepo = path.resolve(userHome, '.oms-templates')
  // 获取模板列表
  fetchTemplateList((templateList) => {
    const choices = templateList.map(template => {
      return {
        name: `${template.name} - ${template.description}`,
        value: template.name
      }
    })
    inquirer.prompt([{
      type: 'list',
      name: 'template',
      choices,
      message: 'Choose the template you want'
    }]).then(answer => {
      // 模板名称
      const tmpName = answer.template
      //远程模板地址
      const tmpUrl = templateList.find(template => template.name === tmpName).url
      const tmpDest = path.join(tmpRepo, tmpName)
      if (exists(tmpDest)) {
        inquirer.prompt([
          {
            type: 'confirm',
            name: 'override',
            message: 'Do you want to overwrite existing templates?'
          }
        ]).then(answer=>{
          if (answer.override) {
            rm(tmpDest)
            downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
          } else {
            generate(tmpDest)
          }
        })
      } else {
        downloadAndGenerate(tmpRepo, tmpName, tmpUrl)
      }
    })
  })
}
/**
 * 
 * @param {String} tmpRepo
 * @param {String} tmpName
 * @param {String} tmpUrl
 */
function downloadAndGenerate(tmpRepo, tmpName, tmpUrl) {
  const spinner = ora('Downloading template...')
  const tmpDest = path.join(tmpRepo, tmpName)
  inquirer.prompt([{
    type: 'input',
    name: 'branch',
    message: `the name of branch you need in ${tmpName}`,
    default: 'master'
  }]).then(answer => {
    spinner.start()
    download(`${tmpUrl}#${answer.branch}`, tmpDest, {
      clone: false
    }, (err) => {
      if (err) {
        spinner.fail(chalk.red('Failed to download template.'))
        console.log(err)
      } else {
        spinner.succeed(chalk.green('Download template successfully!'))
        generate(tmpDest)
      }
    })
  })
}
